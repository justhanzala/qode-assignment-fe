import UploadImageModal from "./components/UploadImageModal";
import ImagesGrid from "./components/ImagesGrid";
import Head from "next/head";
import { useState, useEffect } from "react";
import {
  Button,
  Box,
  Container,
  Heading,
  Image,
  Spinner,
} from "@chakra-ui/react";
import axios from "axios";

interface ImageDataTypes {
  image: any;
  comment: string;
}

const API_BASE_URL = "https://assignment.api.hanzala.co.in";

const Home = () => {
  const [imageData, setImageData] = useState<ImageDataTypes>({
    image: null,
    comment: "",
  });
  const [isOpenModal, setIsOpenModal] = useState(false);
  const [loading, setLoading] = useState(false);
  const [images, setImages] = useState<any>([]);

  const handleClose = () => {
    setIsOpenModal(false);
  };

  const handleChange = (event: any) => {
    const { name, value } = event.target;
    setImageData({
      ...imageData,
      [name]: value,
    });
  };

  const fetchImages = async () => {
    setLoading(true);
    try {
      const response = await axios.get(`${API_BASE_URL}/api/getImages`);
      setImages(response.data);
      setLoading(false);
    } catch (error) {
      console.error("Error fetching images:", error);
      setLoading(false);
    }
  };

  const handleSubmit = async (e: any) => {
    e.preventDefault();
    setLoading(true);

    const formData = new FormData();
    formData.append("image", imageData?.image);
    formData.append("comment", imageData?.comment);

    try {
      await axios.post(`${API_BASE_URL}/api/addImage`, formData, {
        headers: { "Content-Type": "multipart/form-data" },
      });
      fetchImages();
      setIsOpenModal(false);
      setImageData({
        image: null,
        comment: "",
      });
      setLoading(false);
    } catch (error) {
      console.error("Error creating image and comment:", error);
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchImages();
  }, []);

  return (
    <>
      <Head>
        <title>Qode Assignment</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main>
        <Box bgColor="blackAlpha.100" py="3">
          <Container maxW="container.xl">
            <Box
              display="flex"
              alignItems="center"
              justifyContent="space-between"
            >
              <Heading as="h4" size="md">
                Upload Images
              </Heading>
              <Button colorScheme="blue" onClick={() => setIsOpenModal(true)}>
                Upload
              </Button>
            </Box>
          </Container>
        </Box>

        {loading ? (
          <Box my="8">
            <Container maxW="container.xl">
              <Spinner />
            </Container>
          </Box>
        ) : (
          <ImagesGrid images={images} loading={loading} />
        )}

        <UploadImageModal
          handleSaveImages={handleSubmit}
          handleChange={handleChange}
          imageData={imageData}
          onClose={handleClose}
          isOpen={isOpenModal}
        />
      </main>
    </>
  );
};

export default Home;
